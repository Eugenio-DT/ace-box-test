---

# ######################
# #### Validate vars ###
# ######################
- set_fact:
    ingress_class: traefik
    required_extra_vars:
      - dt_oauth_sso_endpoint
      - dt_oauth_client_id
      - dt_oauth_client_secret
      - dt_oauth_account_urn
      - dt_environment_url_gen3

- name: Verify required extra_vars
  assert:
    that: "(item in extra_vars) and (extra_vars[item]|length > 0)"
    fail_msg: "{{ item }} is not defined."
    quiet: true
  loop: "{{ required_extra_vars }}"

- set_fact:
    role_path_abs: "{{ role_path }}"

- include_role:
    name: dt-access-token
  vars:
    access_token_var_name: "monaco_api_token"
    access_token_scope:
      [
        "CaptureRequestData",
        "credentialVault.read",
        "credentialVault.write",
        "DataExport",
        "DataPrivacy",
        "ReadConfig",
        "WriteConfig",
        "events.ingest",
        "settings.read",
        "settings.write",
        "metrics.ingest",
        "logs.ingest"
      ]

#Generate OAuth Token
- block:
    - name: Request a DT OAuth access token
      ansible.builtin.uri:
        url: "{{ extra_vars.dt_oauth_sso_endpoint }}"
        method: POST
        status_code: 200
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body_format: form-urlencoded
        body:
          grant_type: "client_credentials"
          client_id: "{{ extra_vars.dt_oauth_client_id }}"
          client_secret: "{{ extra_vars.dt_oauth_client_secret }}"
          scope: "app-engine:apps:install app-engine:apps:run"
          resource: "{{ extra_vars.dt_oauth_account_urn }}"
      register: auth_response_raw
    - set_fact:
        dt_oauth_access_token: "{{ auth_response_raw.json.access_token }}"

- name: "Install app {{ item.dt_app_id }}"
  ansible.builtin.uri:
    url: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') }}/platform/app-engine/registry/v1/apps/{{ item.dt_app_id }}:install-bundle"
    method: POST
    status_code: 202
    headers:
      Authorization: "Bearer {{ dt_oauth_access_token }}"
  loop:
    - dt_app_id: "dynatrace.slack"
      dt_app_version: "1.3.1"
    - dt_app_id: "dynatrace.gitlab.connector"
      dt_app_version: "0.2.2"
    - dt_app_id: "dynatrace.jira"
      dt_app_version: "4.0.0"
    - dt_app_id: "dynatrace.msteams"
      dt_app_version: "1.0.1"

- include_role:
    name: monaco-v2

- include_role:
    name: monaco-v2
    tasks_from: apply-monaco
  vars:
    monaco_projects_root: "{{role_path_abs}}/files/monaco"  # monaco projects root folder path
    monaco_project: "" # selection of projects or all projects under the root path if set empty
    monaco_manifest_path: "{{role_path_abs}}/files/monaco/manifest.yaml"
    monaco_environment:
      DT_API_TOKEN: "{{ monaco_api_token }}"
      DT_PLATFORM_TENANT_URL: "{{ extra_vars.dt_environment_url_gen3 }}"
      DT_OAUTH_CLIENT_ID: "{{ extra_vars.dt_oauth_client_id }}"
      DT_OAUTH_CLIENT_SECRET: "{{ extra_vars.dt_oauth_client_secret }}"
      DT_OAUTH_SSO_ENDPOINT: "{{ extra_vars.dt_oauth_sso_endpoint }}"
      INGRESS_DOMAIN: "{{ ingress_domain }}"

- include_role:
    name: microk8s

- include_role:
    name: dt-operator

- include_role:
    name: app-unguard

- include_role:
    name: easytrade

# Include and template use case specific values before installing Dashboard
- set_fact:
    include_dashboard_value_file: "{{ role_path }}/templates/my-use-case-dashboard.yml.j2"

- include_role:
    name: dashboard
    tasks_from: template-values-file

- include_role:
    name: dashboard
